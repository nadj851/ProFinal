@model Enchere.Models.ObjetsViewModel

@{
    ViewBag.Title = "Index2";
    Layout = "~/Views/Shared/_MainLayout.cshtml";
}
@functions{
    public double getNiveauEnchere(int id)
    {
        if (Model.Enchere.Where(a => a.ObjetId == id).Any())
        {
            return Model.Enchere.Where(a => a.ObjetId == id).ToList().Max(m => m.enchereNiveau);
        }
        else
        {
            return 0;
        }
    }
    public int getNombreOffres(int id)
    {
        return Model.Enchere.Where(a => a.ObjetId == id).Count();
    }


}



@foreach (var item in Model.Categorie)
{
    <div class="panel panel-info">
        <div class="panel-heading"><h1>@Html.DisplayFor(modelItem => item.CategoryName)</h1></div>


        <div class="row panel-body ">
            <h5>@Html.DisplayFor(modelItem => item.CategoryDescription)</h5>


            @foreach (var subitem in item.objets)
            {



                <div class="col-md-3 img-thumbnail" style="margin-left:20px;margin-bottom:30px;min-height:380px;">
                    <p class="demo notranslate" id="@subitem.Id">  </p>
                    <img src="~/Uploads/@subitem.objetImage" style="width:200px;height:200px;" />
                    <h3>@Html.DisplayFor(modelItem => subitem.objetNom)</h3>
                    <h5>@Html.Raw(HttpUtility.HtmlDecode(Html.DisplayFor(modelItem => subitem.objetDescription).ToString()))</h5>
                    @Html.ActionLink("Details", "Details", new { objetId = subitem.Id }, new { @class = "badge" }) |
                    <span id="spanPrix" class="badge badge-warning">Prix actuel: @getNiveauEnchere(subitem.Id) $</span> 
                    <span id="spanOffre" class="badge">@getNombreOffres(subitem.Id) Offres</span>
                    <span id="spanEtat" class="badge badge-info">@subitem.Statut</span>

                </div>

            }
        </div>

    </div>
}




<script>

    var objets = [];
    var objetsId = [];
    @foreach (var item in Model.Categorie){
        foreach (var subitem in item.objets){
            long duree = subitem.objetDureeVente;
            DateTime dateLimite = subitem.objetDateInsc.AddDays(duree);          

             @:objets.push("@(dateLimite.ToShortDateString())");
             @:objetsId.push("@subitem.Id");
        }
    }
    for (let i = 0; i < objets.length; i++) {           
   
    // Update the count down every 1 second
    var x = setInterval(function () {
        
    // Set the date we're counting down to        
    var countDownDate = new Date(parseInt(objets[i])).getTime();
        
    // Get todays date and time
    var now = new Date().getTime();

    // Find the distance between now an the count down date
    var distance = countDownDate - now;

    // Time calculations for days, hours, minutes and seconds
    var days = Math.floor(distance / (1000 * 60 * 60 * 24));
    var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
    var seconds = Math.floor((distance % (1000 * 60)) / 1000);

    // Display the result in the element with id="demo"
    document.getElementById(objetsId[i]).innerHTML = days + "d " + hours + "h "
            + minutes + "m " + seconds + "s ";

            // If the count down is finished, write some text
            if (distance < 0) {
                clearInterval(x);
    document.getElementById(objetsId[i]).innerHTML = "EXPIRED";
            }
        }, 1000);
    }


</script>
